<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
   		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 加载db.properties属性文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 配置C3p0 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 指定连接池中保留的最大连接数. Default:15 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!-- 指定连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0 -->
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		<!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
	</bean>
	<!-- 配置sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 注入数据库连接 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置hibernate可选参数 -->
		<property name="hibernateProperties">
				<props>
					<!-- Mysql方言 -->
					<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
					<!-- 显示sql -->
					<prop key="hibernate.show_sql">true</prop>
					<!-- sql格式化 -->
					<prop key="hibernate.format_sql">true</prop>
					<!-- 对表结构的操作 (update) -->
					<prop key="hibernate.hbm2ddl.auto">update</prop>
				</props>		
		</property>
		<!-- 加载表映射文件 -->
		<property name="mappingResources">
			<list>
				<value>com/ithc/bean/Sys_User.hbm.xml</value>
				<value>com/ithc/bean/Customer.hbm.xml</value>
				<value>com/ithc/bean/Base_Dict.hbm.xml</value>
				<value>com/ithc/bean/Visit.hbm.xml</value>
				<value>com/ithc/bean/LinkMan.hbm.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置事务管理平台 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- 开启事物注解扫描 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- 登入模块 -->
	<!-- action -->
	<bean id="sys_UserAction" class="com.ithc.action.Sys_UserAction" scope="prototype">
		<property name="sys_UserService" ref="sys_UserService"/>
	</bean>
	
	<!-- service -->
	<bean id="sys_UserService" class="com.ithc.service.Sys_UserServiceImpl">
		<property name="sys_UserDao" ref="sys_UserDao"/>
	</bean>

	<!-- dao -->
	<bean id="sys_UserDao" class="com.ithc.dao.Sys_UserDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>		
	</bean>

	<!-- 客户模块 -->
	<bean id="customerAction" class="com.ithc.action.CustomerAction" scope="prototype">
		<property name="customerService" ref="customerService"/>
	</bean>
	
	<bean id="customerService" class="com.ithc.service.CustomerServiceImpl">
		<property name="customerDao" ref="customerDao"/>
	</bean>
	
	<bean id="customerDao" class="com.ithc.dao.CustomerDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<!-- base_dict 数据字典模块 -->
	<bean id="base_DictAction" class="com.ithc.action.Base_DictAction" scope="prototype">
		<property name="base_DictService" ref="base_DictService"/>
	</bean>

	<bean id="base_DictService" class="com.ithc.service.Base_DictServiceImpl">
		<property name="base_DictDao" ref="base_DictDao"/>
	</bean>
	
	<bean id="base_DictDao" class="com.ithc.dao.Base_DictDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>	
	</bean>

	<!-- 联系人模块 -->
	<bean id="linkManAction" class="com.ithc.action.LinkManAction" scope="prototype">
		<property name="linkManService" ref="linkManService"/>
	</bean>
	
	<bean id="linkManService" class="com.ithc.service.LinkManServiceImpl">
		<property name="linkManDao" ref="linkManDao"/>
	</bean>
	
	<bean id="linkManDao" class="com.ithc.dao.LinkManDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



</beans>
